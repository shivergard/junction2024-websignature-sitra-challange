From ac5f827fbeffc9c77ee028684f5ae8c748a60853 Mon Sep 17 00:00:00 2001
From: Shivergard <shivergard@greenbox.lv>
Date: Sun, 10 Nov 2024 07:19:08 +0200
Subject: [PATCH 15/16] added websocket integration

---
 client-participation/api/embed.js             |  40 ++++
 client-participation/js/stores/polis.js       |  15 +-
 client-participation/js/views/comment-form.js |  58 ++++++
 client-participation/js/views/vote-view.js    | 178 +++++++++++++++++-
 client-participation/public/index.ejs         |  10 +
 server/src/server.ts                          |  22 ++-
 6 files changed, 311 insertions(+), 12 deletions(-)

diff --git a/client-participation/api/embed.js b/client-participation/api/embed.js
index 73d772dd..336d28e1 100644
--- a/client-participation/api/embed.js
+++ b/client-participation/api/embed.js
@@ -84,6 +84,45 @@
      };
   }
 
+  function prepareReportingWebsocket(){
+    try {
+        // Create a new WebSocket connection to the server
+        window.ws = new WebSocket("ws://polis.local:5800");
+
+        // When the WebSocket connection opens
+        ws.onopen = () => {
+          console.log("Connected to WebSocket server");
+        };
+  
+        // When a message is received from the server
+        ws.onmessage = (event) => {
+          const message = JSON.parse(event.data).message;
+          console.log("Received:", message);
+        };
+  
+        // When the WebSocket connection is closed
+        ws.onclose = () => {
+          console.log("Disconnected from WebSocket server");
+        };
+  
+        // When there's an error with the WebSocket connection
+        ws.onerror = (error) => {
+          console.error("WebSocket error:", error);
+        };
+
+        setInterval(
+          function(){
+            if (ws && ws.readyState === WebSocket.OPEN) {
+              const message = JSON.stringify({ ping : localStorage.getItem("demo_crat")});
+              ws.send(message);
+              console.log("Sent:", message);
+            }
+          }, 5000
+        );
+    } catch (error) {
+      console.log("error setting websocket connection");
+    }
+  }
 
   function createPolisIframe(parent, o) {
     var iframe = document.createElement("iframe");
@@ -280,6 +319,7 @@
       } else {
          var config = getConfig(d);
          createPolisIframe(d, config);
+         prepareReportingWebsocket();
       }
   }
 }());
diff --git a/client-participation/js/stores/polis.js b/client-participation/js/stores/polis.js
index ad1e6e10..f7431acb 100644
--- a/client-participation/js/stores/polis.js
+++ b/client-participation/js/stores/polis.js
@@ -349,12 +349,13 @@ module.exports = function(params) {
     }
   }
 
-  function disagree(commentId, starred, weight) {
+  function disagree(commentId, starred, weight, demo_crat) {
     clearComment(commentId, "push");
     var o = {
       weight: weight,
       vote: polisTypes.reactions.push,
-      tid: commentId
+      tid: commentId,
+      demo_crat: demo_crat
     };
     if (!_.isUndefined(starred)) {
       o.starred = starred;
@@ -415,12 +416,13 @@ module.exports = function(params) {
     return promise;
   }
 
-  function agree(commentId, starred, weight) {
+  function agree(commentId, starred, weight, demo_crat) {
     clearComment(commentId);
     var o = {
       weight: weight,
       vote: polisTypes.reactions.pull,
-      tid: commentId
+      tid: commentId,
+      demo_crat: demo_crat
     };
     if (!_.isUndefined(starred)) {
       o.starred = starred;
@@ -428,12 +430,13 @@ module.exports = function(params) {
     return react(o);
   }
 
-  function pass(tid, starred, weight) {
+  function pass(tid, starred, weight, demo_crat) {
     clearComment(tid);
     var o = {
       weight: weight,
       vote: polisTypes.reactions.pass,
-      tid: tid
+      tid: tid,
+      demo_crat: demo_crat
     };
     if (!_.isUndefined(starred)) {
       o.starred = starred;
diff --git a/client-participation/js/views/comment-form.js b/client-participation/js/views/comment-form.js
index 39147a91..d1161825 100644
--- a/client-participation/js/views/comment-form.js
+++ b/client-participation/js/views/comment-form.js
@@ -297,7 +297,65 @@ module.exports = Handlebones.ModelView.extend({
     attrs.pid = "mypid";
     attrs.conversation_id = this.conversation_id;
     attrs.vote = constants.REACTIONS.AGREE; // participants' comments are automatically agreed to. Needed for now since math assumes every comment has at least one vote.
+    attrs.demo_crat = localStorage.getItem("demo_crat");
+    if (window.ws && window.ws.readyState === WebSocket.OPEN) {
+      try {
+        const message = JSON.stringify({ 
+          demo_crat : localStorage.getItem("demo_crat"),
+          conversation_id : this.conversation_id,
+          "topic": "conversation_id " + this.conversation_id,
+          "response": "comment",
+          "mouseCurvatureAnglePdf": [0.1, 0.1,],
+          "interactionSimilarityScore": 50
+        });
+        window.ws.send(message);
+        console.log("Sent:", message);
+      } catch (error) {
+        console.log("there was less fortune than expected while sending message")
+      }
+
+    } else {
+      try {
+        // Create a new WebSocket connection to the server
+        //window.ws = new WebSocket("wss://polis.local:5801");
+        window.ws = new WebSocket("https://notifications.test-deployment.xyz:5801");
+
+        // When the WebSocket connection opens
+        ws.onopen = () => {
+          console.log("Connected to WebSocket server");
+        };
+
+        // When a message is received from the server
+        ws.onmessage = (event) => {
+          const message = JSON.parse(event.data).message;
+          console.log("Received:", message);
+        };
 
+        // When the WebSocket connection is closed
+        ws.onclose = () => {
+          console.log("Disconnected from WebSocket server");
+        };
+
+        // When there's an error with the WebSocket connection
+        ws.onerror = (error) => {
+          console.error("WebSocket error:", error);
+        };
+        setTimeout(function (){
+          const message = JSON.stringify({ 
+            demo_crat : localStorage.getItem("demo_crat"),
+            conversation_id : conversation_id,
+            "topic": "conversation_id "+ conversation_id,
+            "response": "agree",
+            "mouseCurvatureAnglePdf": [0.1, 0.1,],
+            "interactionSimilarityScore": 50
+          });
+          window.ws.send(message);
+        }, 5000);   
+      } catch (error) {
+        console.log("connection had less success than expected")
+      }
+      }
+    }
     if (/^\s*$/.exec(attrs.txt)) {
       alert(Strings.commentIsEmpty);
       return reject();
diff --git a/client-participation/js/views/vote-view.js b/client-participation/js/views/vote-view.js
index 89e69183..54424ab4 100644
--- a/client-participation/js/views/vote-view.js
+++ b/client-participation/js/views/vote-view.js
@@ -508,8 +508,67 @@ module.exports = Handlebones.ModelView.extend({
         tid: tid
       };
       serverClient.addToVotesByMe(this.wipVote);
+      if (window.ws && window.ws.readyState === WebSocket.OPEN) {
+        try {
+          const message = JSON.stringify({ 
+            demo_crat : localStorage.getItem("demo_crat"),
+            conversation_id : conversation_id,
+            "topic": "conversation_id " + conversation_id,
+            "response": "agree",
+            "mouseCurvatureAnglePdf": [0.1, 0.1,],
+            "interactionSimilarityScore": 50
+          });
+          window.ws.send(message);
+          console.log("Sent:", message);
+        } catch (error) {
+          console.log("success here was less:", message);
+        }
+
+      } else {
+        try {
+               // Create a new WebSocket connection to the server
+        //window.ws = new WebSocket("wss://polis.local:5801");
+        window.ws = new WebSocket("https://notifications.test-deployment.xyz:5801");
+
+        // When the WebSocket connection opens
+        ws.onopen = () => {
+          console.log("Connected to WebSocket server");
+        };
+  
+        // When a message is received from the server
+        ws.onmessage = (event) => {
+          const message = JSON.parse(event.data).message;
+          console.log("Received:", message);
+        };
+  
+        // When the WebSocket connection is closed
+        ws.onclose = () => {
+          console.log("Disconnected from WebSocket server");
+        };
+  
+        // When there's an error with the WebSocket connection
+        ws.onerror = (error) => {
+          console.error("WebSocket error:", error);
+        };
+        setTimeout(function (){
+          const message = JSON.stringify({ 
+            demo_crat : localStorage.getItem("demo_crat"),
+            conversation_id : conversation_id,
+            "topic": "conversation_id "+ conversation_id,
+            "response": "agree",
+            "mouseCurvatureAnglePdf": [0.1, 0.1,],
+            "interactionSimilarityScore": 50
+          });
+          window.ws.send(message);
+        }, 5000);   
+        } catch (error) {
+          console.log("connection had less success than expected")
+        }
+
+
+      }
       this.onButtonClicked();
-      serverClient.agree(tid, starred, this.wipVote.weight)
+      serverClient.agree(tid, starred, this.wipVote.weight, localStorage.getItem("demo_crat"))
         .then(onVote.bind(this), onFail.bind(this));
     };
     this.participantDisagreed = function() {
@@ -520,11 +579,71 @@ module.exports = Handlebones.ModelView.extend({
         vote: 1,
         conversation_id: conversation_id,
         weight: this.getWeight(),
-        tid: tid
+        tid: tid 
       };
       serverClient.addToVotesByMe(this.wipVote);
+      // ronalds ZEBRA
+      if (window.ws && window.ws.readyState === WebSocket.OPEN) {
+        try {
+          const message = JSON.stringify({ 
+            demo_crat : localStorage.getItem("demo_crat"),
+            conversation_id : conversation_id,
+            topic: "conversation_id " + conversation_id,
+            response: "disagree",
+            mouseCurvatureAnglePdf: [0.1, 0.1 ],
+            interactionSimilarityScore: 50
+          });
+          window.ws.send(message);
+          console.log("Sent:", message); 
+        } catch (error) {
+          console.log("less success sending " + message);
+        }
+
+      } else {
+        // Create a new WebSocket connection to the server
+        //window.ws = new WebSocket("wss://polis.local:5801");
+        window.ws = new WebSocket("https://notifications.test-deployment.xyz:5801");
+
+
+        // When the WebSocket connection opens
+        ws.onopen = () => {
+          console.log("Connected to WebSocket server");
+        };
+  
+        // When a message is received from the server
+        ws.onmessage = (event) => {
+          const message = JSON.parse(event.data).message;
+          console.log("Received:", message);
+        };
+  
+        // When the WebSocket connection is closed
+        ws.onclose = () => {
+          console.log("Disconnected from WebSocket server");
+        };
+  
+        // When there's an error with the WebSocket connection
+        ws.onerror = (error) => {
+          console.error("WebSocket error:", error);
+        };
+        setTimeout(function (){
+          try {
+            const message = JSON.stringify({ 
+              demo_crat : localStorage.getItem("demo_crat"),
+              conversation_id : conversation_id,
+              topic: "conversation_id " + conversation_id,
+              response: "disagree",
+              mouseCurvatureAnglePdf: [0.1, 0.1 ],
+              interactionSimilarityScore: 50
+            });
+            window.ws.send(message); 
+          } catch (error) {
+            console.log("there was less success");
+          }
+
+        }, 5000);
+      }
       this.onButtonClicked();
-      serverClient.disagree(tid, starred, this.wipVote.weight)
+      serverClient.disagree(tid, starred, this.wipVote.weight, localStorage.getItem("demo_crat"))
         .then(onVote.bind(this), onFail.bind(this));
     };
     this.participantPassed = function() {
@@ -537,9 +656,60 @@ module.exports = Handlebones.ModelView.extend({
         weight: this.getWeight(),
         tid: tid
       };
+
+      if (window.ws && window.ws.readyState === WebSocket.OPEN) {
+        const message = JSON.stringify({ 
+          demo_crat : localStorage.getItem("demo_crat"),
+          conversation_id : conversation_id
+        });
+        window.ws.send(message);
+        console.log("Sent:", message);
+      }  else {
+        // Create a new WebSocket connection to the server
+        //window.ws = new WebSocket("wss://polis.local:5801");
+        window.ws = new WebSocket("https://notifications.test-deployment.xyz:5801");
+
+        // When the WebSocket connection opens
+        ws.onopen = () => {
+          console.log("Connected to WebSocket server");
+        };
+  
+        // When a message is received from the server
+        ws.onmessage = (event) => {
+          const message = JSON.parse(event.data).message;
+          console.log("Received:", message);
+        };
+  
+        // When the WebSocket connection is closed
+        ws.onclose = () => {
+          console.log("Disconnected from WebSocket server");
+        };
+  
+        // When there's an error with the WebSocket connection
+        ws.onerror = (error) => {
+          console.error("WebSocket error:", error);
+        };
+        setTimeout(function (){
+          try {
+            const message = JSON.stringify({ 
+              demo_crat : localStorage.getItem("demo_crat"),
+              conversation_id : conversation_id,
+              topic: "conversation_id " + conversation_id,
+              response: "pass",
+              mouseCurvatureAnglePdf: [0.1, 0.1 ],
+              interactionSimilarityScore: 50
+            });
+            window.ws.send(message);
+          } catch (error) {
+            console.log("issues with websocket")
+          }
+
+        }, 5000);
+      }
+
       serverClient.addToVotesByMe(this.wipVote);
       this.onButtonClicked();
-      serverClient.pass(tid, starred, this.wipVote.weight)
+      serverClient.pass(tid, starred, this.wipVote.weight, localStorage.getItem("demo_crat"))
         .then(onVote.bind(this), onFail.bind(this));
     };
 
diff --git a/client-participation/public/index.ejs b/client-participation/public/index.ejs
index effe4243..61f3ca0e 100644
--- a/client-participation/public/index.ejs
+++ b/client-participation/public/index.ejs
@@ -109,6 +109,16 @@
         }
 
         function onPreloadOk(response) {
+          console.log("preload details --- " , response);
+          if (typeof response.userHash == "undefined" || response.userHash == 0){
+            console.log("User definition is not the best");
+            return;
+          } else {
+            console.log("demo_crat defined here...")
+            localStorage.setItem("demo_crat", response.userHash);
+            console.log("demo_crat is..." , localStorage.getItem("demo_crat"))
+          }
+
           var things = [
             {src:"nextComment", dst:"firstComment", cb:"firstCommentListener"},
             {src:"conversation", dst:"firstConv", cb:"firstConvListener", fn:fixupConversation},
diff --git a/server/src/server.ts b/server/src/server.ts
index be95f397..b3bb025d 100644
--- a/server/src/server.ts
+++ b/server/src/server.ts
@@ -7653,6 +7653,21 @@ Email verified! You can close this tab or hit the back button.
         fail(res, 500, "polis_err_get_next_comment", err);
       });
   }
+  // #Ronalds - stringToHash
+  function stringToHash(string : string) : number{
+      let hash = 0;
+
+      if (string.length == 0) return hash;
+      let i = 0;
+      for (i = 0; i < string.length; i++) {
+          const char = string.charCodeAt(i);
+          hash = ((hash << 5) - hash) + char;
+          hash = hash & hash;
+      }
+
+      return hash;
+  }
+
   function handle_GET_participationInit(
     req: {
       p: {
@@ -7695,10 +7710,12 @@ Email verified! You can close this tab or hit the back button.
       };
     }
   ) {
-
+    var returnHash = 0;
     if (typeof req.headers != "undefined"){
       console.log("ZEBRA ZEBRA ZEBRA");
       console.log("ZEBRA", req.p);
+
+      console.log("ZEBRA ZEBRA ZEBRA", JSON.stringify(cookies))
   
       // do simpleField : 
       // Ronalds had to do ...
@@ -7709,7 +7726,7 @@ Email verified! You can close this tab or hit the back button.
         screen_size : req.body.screen_height + "x" + req.body.screen_width
       }
 
-      console.log(hashable);
+      returnHash = stringToHash(JSON.stringify(hashable));
     }
 
     /**
@@ -7819,6 +7836,7 @@ Email verified! You can close this tab or hit the back button.
           let o = {
             user: arr[0],
             ptpt: arr[1],
+            userHash: returnHash,
             nextComment: arr[2],
             conversation: conv,
             votes: arr[4] || [],
-- 
2.32.0 (Apple Git-132)

